-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


DROP TABLE IF EXISTS public.fp_users CASCADE;


CREATE TABLE IF NOT EXISTS public.fp_users
(
    id serial NOT NULL,
    firstname character varying(45) NOT NULL,
    lastname character varying(120) NOT NULL,
    email character varying(320) NOT NULL,
    pseudo character varying(50),
    password character varying(255) NOT NULL,
    date_created timestamp with time zone NOT NULL,
    date_updated time with time zone NOT NULL,
	user_role character varying(45) NOT NULL,
    identifier character varying(36) NOT NULL,
    status boolean NOT NULL,
    fp_settings_id serial NOT NULL,
    CONSTRAINT fp_users_id PRIMARY KEY (id),
    CONSTRAINT fp_users_email UNIQUE (email),
    CONSTRAINT fp_users_identifier UNIQUE (identifier)
);

DROP TABLE IF EXISTS public.fp_reservations CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_reservations
(
    id serial NOT NULL,
    date date NOT NULL,
    "time" time with time zone NOT NULL,
    nb_person integer NOT NULL,
    firstname character varying(45) NOT NULL,
    lastname character varying(45) NOT NULL,
    phone character varying(15) NOT NULL,
    fp_users_id serial NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fp_pages CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_pages
(
    id serial NOT NULL,
    fp_users_id serial NOT NULL,
    fp_restaurants_id serial NOT NULL,
    name character varying(45),
    slug character varying(150) NOT NULL,
    active boolean NOT NULL,
    date_created time with time zone NOT NULL,
    date_updated time with time zone NOT NULL,
    parent_id integer,
    identifier character varying(36) NOT NULL,
    nb_views integer NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT fp_pages_slug UNIQUE (slug),
    CONSTRAINT fp_pages_identifier UNIQUE (identifier)
);

DROP TABLE IF EXISTS public.fp_categories CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_categories
(
    id serial NOT NULL,
    name character(45) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fp_comments CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_comments
(
    id serial NOT NULL,
    text text NOT NULL,
    date_created time with time zone NOT NULL,
    date_updated time with time zone,
    fp_users_id serial NOT NULL,
    fp_restaurants_id serial NOT NULL,
    fp_recipes_id serial NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fp_restaurants CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_restaurants
(
    id serial NOT NULL,
    name character varying(45) NOT NULL,
    address character varying(64),
    phone character varying(15),
    schedule text,
    rating numeric,
    created_at timestamp with time zone NOT NULL,
    updated_at time with time zone NOT NULL,
    link_instagram character varying(2083),
    link_facebook character varying(2083),
    link_twitter character varying(2083),
    link_youtube character varying(2083),
    link_snapchat character varying(2083),
    link_tiktok character varying(2083),
    PRIMARY KEY (id),
    CONSTRAINT fp_restaurants_link_instagram UNIQUE (link_instagram),
    CONSTRAINT fp_restaurants_link_facebook UNIQUE (link_facebook),
    CONSTRAINT fp_restaurants_link_twitter UNIQUE (link_twitter),
    CONSTRAINT fp_restaurants_link_youtube UNIQUE (link_youtube),
    CONSTRAINT fp_restaurants_link_snapchat UNIQUE (link_snapchat),
    CONSTRAINT fp_restaurants_link_tiktok UNIQUE (link_tiktok)
);

DROP TABLE IF EXISTS public.fp_ingredients CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_ingredients
(
    id serial NOT NULL,
    name character varying(45) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fp_medias CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_medias
(
    id serial NOT NULL,
    name character varying(255) NOT NULL,
    type character varying(100) NOT NULL,
    size integer,
    description text,
    created_at time with time zone NOT NULL,
    updated_at time with time zone NOT NULL,
    identifier character varying(36) NOT NULL,
    fp_restaurants_id serial NOT NULL,
    fp_recipes_id serial NOT NULL,
    PRIMARY KEY (id),
    CONSTRAINT fp_medias_identifier UNIQUE (identifier)
);

DROP TABLE IF EXISTS public.fp_recipes CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_recipes
(
    id serial NOT NULL,
    name character varying(64) NOT NULL,
    time_preparation character varying(45),
    difficulty character varying(20),
    preparation text,
    created_at time with time zone NOT NULL,
    updated_at time with time zone NOT NULL,
    fp_pages_id serial NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fp_settings CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_settings
(
    id serial NOT NULL,
    color character varying(16) NOT NULL,
    font character varying(64) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.fp_recipes_fp_categories CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_recipes_fp_categories
(
    fp_recipes_id serial NOT NULL,
    fp_categories_id serial NOT NULL
);

DROP TABLE IF EXISTS public.fp_recipes_fp_ingredients CASCADE;

CREATE TABLE IF NOT EXISTS public.fp_recipes_fp_ingredients
(
    fp_recipes_id serial NOT NULL,
    fp_ingredients_id serial NOT NULL
);

ALTER TABLE IF EXISTS public.fp_users
    ADD FOREIGN KEY (fp_settings_id)
    REFERENCES public.fp_settings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_reservations
    ADD CONSTRAINT fp_users_id FOREIGN KEY (fp_users_id)
    REFERENCES public.fp_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_pages
    ADD CONSTRAINT fp_users_id FOREIGN KEY (fp_users_id)
    REFERENCES public.fp_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_pages
    ADD FOREIGN KEY (fp_restaurants_id)
    REFERENCES public.fp_restaurants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_comments
    ADD CONSTRAINT fp_users_id FOREIGN KEY (fp_users_id)
    REFERENCES public.fp_users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_comments
    ADD CONSTRAINT fp_restaurants_id FOREIGN KEY (fp_restaurants_id)
    REFERENCES public.fp_restaurants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_comments
    ADD CONSTRAINT fp_recipes_id FOREIGN KEY (fp_recipes_id)
    REFERENCES public.fp_recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_medias
    ADD FOREIGN KEY (fp_restaurants_id)
    REFERENCES public.fp_restaurants (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_medias
    ADD FOREIGN KEY (fp_recipes_id)
    REFERENCES public.fp_recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_recipes
    ADD FOREIGN KEY (fp_pages_id)
    REFERENCES public.fp_pages (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_recipes_fp_categories
    ADD FOREIGN KEY (fp_recipes_id)
    REFERENCES public.fp_recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_recipes_fp_categories
    ADD FOREIGN KEY (fp_categories_id)
    REFERENCES public.fp_categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_recipes_fp_ingredients
    ADD FOREIGN KEY (fp_recipes_id)
    REFERENCES public.fp_recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.fp_recipes_fp_ingredients
    ADD FOREIGN KEY (fp_ingredients_id)
    REFERENCES public.fp_ingredients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;