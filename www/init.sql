-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;

DROP TABLE IF EXISTS public.fp_restaurants CASCADE;

DROP TABLE IF EXISTS public.users CASCADE;

CREATE TABLE IF NOT EXISTS public.users
(
    id serial NOT NULL,
    firstname character varying(45) NOT NULL,
    lastname character varying(120) NOT NULL,
    email character varying(320) NOT NULL,
    pseudo character varying(50),
    password character varying(255) NOT NULL,
    date_created timestamp with time zone NOT NULL,
    date_updated time with time zone NOT NULL,
    identifier character varying(36) NOT NULL,
    status boolean NOT NULL,
    settings_id serial NOT NULL,
    CONSTRAINT id_users PRIMARY KEY (identifier),
    CONSTRAINT email UNIQUE (email),
    CONSTRAINT uuid UNIQUE (identifier)
);

DROP TABLE IF EXISTS public.reservations CASCADE;

CREATE TABLE IF NOT EXISTS public.reservations
(
    id serial NOT NULL,
    date date NOT NULL,
    "time" time with time zone NOT NULL,
    nb_person integer NOT NULL,
    firstname character varying(45) NOT NULL,
    lastname character varying(45) NOT NULL,
    phone character varying(15) NOT NULL,
    users_id serial NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.pages CASCADE;

CREATE TABLE IF NOT EXISTS public.pages
(
    id serial NOT NULL,
    users_id serial NOT NULL,
    name character varying(45),
    slug character varying(150) NOT NULL,
    active boolean NOT NULL,
    date_created time with time zone NOT NULL,
    date_updated time with time zone NOT NULL,
    parent_id integer,
    identifier character varying(36) NOT NULL,
    nb_views integer NOT NULL,
    PRIMARY KEY (identifier),
    CONSTRAINT slug UNIQUE (slug),
    CONSTRAINT uuid UNIQUE (identifier)
);

DROP TABLE IF EXISTS public.categories CASCADE;

CREATE TABLE IF NOT EXISTS public.categories
(
    id serial NOT NULL,
    name character(45) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.comments CASCADE;

CREATE TABLE IF NOT EXISTS public.comments
(
    id serial NOT NULL,
    text text NOT NULL,
    date_created time with time zone NOT NULL,
    date_updated time with time zone,
    users_id serial NOT NULL,
    recipes_id serial NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.ingredients CASCADE;

CREATE TABLE IF NOT EXISTS public.ingredients
(
    id serial NOT NULL,
    name character varying(45) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.medias CASCADE;

CREATE TABLE IF NOT EXISTS public.medias
(
    id serial NOT NULL,
    name character varying(255) NOT NULL,
    type character varying(100) NOT NULL,
    size integer,
    description text,
    created_at time with time zone NOT NULL,
    updated_at time with time zone NOT NULL,
    identifier character varying(36) NOT NULL,
    recipes_id serial NOT NULL,
    PRIMARY KEY (identifier),
    CONSTRAINT uuid UNIQUE (identifier)
);

DROP TABLE IF EXISTS public.recipes CASCADE;

CREATE TABLE IF NOT EXISTS public.recipes
(
    id serial NOT NULL,
    name character varying(64) NOT NULL,
    time_preparation character varying(45),
    difficulty character varying(20),
    preparation text,
    created_at time with time zone NOT NULL,
    updated_at time with time zone NOT NULL,
    slug character varying(150) NOT NULL,
    active boolean NOT NULL,
    identifier character varying(36) NOT NULL,
    nb_view integer NOT NULL,
    PRIMARY KEY (identifier)
);

DROP TABLE IF EXISTS public.settings CASCADE;

CREATE TABLE IF NOT EXISTS public.settings
(
    id serial NOT NULL,
    color character varying(16) NOT NULL,
    font character varying(64) NOT NULL,
    PRIMARY KEY (id)
);

DROP TABLE IF EXISTS public.recipes_categories CASCADE;

CREATE TABLE IF NOT EXISTS public.recipes_categories
(
    recipes_id serial NOT NULL,
    categories_id serial NOT NULL
);

DROP TABLE IF EXISTS public.recipes_ingredients CASCADE;

CREATE TABLE IF NOT EXISTS public.recipes_ingredients
(
    recipes_id serial NOT NULL,
    ingredients_id serial NOT NULL
);

ALTER TABLE IF EXISTS public.users
    ADD FOREIGN KEY (settings_id)
    REFERENCES public.settings (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.reservations
    ADD CONSTRAINT users_id FOREIGN KEY (users_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.pages
    ADD CONSTRAINT users_id FOREIGN KEY (users_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT users_id FOREIGN KEY (users_id)
    REFERENCES public.users (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.comments
    ADD CONSTRAINT recipes_id FOREIGN KEY (recipes_id)
    REFERENCES public.recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.medias
    ADD FOREIGN KEY (recipes_id)
    REFERENCES public.recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.recipes_categories
    ADD FOREIGN KEY (recipes_id)
    REFERENCES public.recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.recipes_categories
    ADD FOREIGN KEY (categories_id)
    REFERENCES public.categories (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.recipes_ingredients
    ADD FOREIGN KEY (recipes_id)
    REFERENCES public.recipes (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS public.recipes_ingredients
    ADD FOREIGN KEY (ingredients_id)
    REFERENCES public.ingredients (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;

END;